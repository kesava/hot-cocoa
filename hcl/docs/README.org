* HOT COCOA LISP
  Hot Cocoa Lisp is a dialect of Lisp designed to be compiled into or
  interpreted in Javascript.  It has been said that Javascript is
  Scheme in C's Clothes.  Hot Cocoa Lisp is an attempt to put it back
  in Schemes clothes.
** High Level Design Goals
   - Provide a clean, intuitive interface to existing
     Javascript libraries/frameworks
   - Use the minimal syntax of Lisp
   - Retain the good features of Javascript
     (first-class functions with closures, Dynamic objects with prototypes,
     Object literals).
   - Leave out the bad features of Javascript.
     (Global variables, type coersion, etc.)
** Concerns
   One of the major questions I still have is where my compiler will fall
   between two particular extremes.  The first extreme is to simply generate
   a Lisp parse tree, define eval (and realistically a few other things) in
   Javascript, and simply run eval on the parse tree.  The second extreme is
   generating Javascript code that looks nothing like the HCL code it came
   from.  Because I'm not terribly interested in diving down the rabbit hole
   of compiler optimization, I suspect I will fall a bit closer to the former.
   
   Another concern I have is how exactly I want to handle including code from
   other files.  In code targeted at node, the node "require" method should work
   fine:
   
   : var lib = require("./lib.js")
   
   could become
   
   : (define lib (require "./lib.hcl"))
   
   and in theory, I could even include source files from Javascript /or/ HCL
   this way by looking at the file extension.  One possibility for browser
   implementations is creating an analogous require function that loads source
   libraries via AJAX and compiles them in the browser.  Alternately, multiple
   compiled HCL files could be loaded via separate script tags and one could be
   designated the "main" one (through a compiler directive or the like) and be
   would then be able to access the others via a require method.
   
** Javascript objects
   To fascilitate interoperability, HCL objects work almost exactly
   the same as Javascript objects with a few exceptions.
   
*** literal notation
    Object literals can declared in one of two ways:
    
    : {a 1 b 2}
    
    OR
    
    : (object a 1 b 2)
    
    The first is translated by the parser into the second.  In either
    case an even number of arguments is expected and they interpreted
    pairwise as key-value pairs.
    
*** access notation
**** Getting
     The simplest way to access a property of an object is using the
     familiar dotted notation from Javascript:
     
     : obj.key
     
     Or the more lisp-like:
     
     : (. obj key)
     
     As before the first is translated to the second by the parser.
     
     Access in this form can also be chained (e.g.):
     
     : obj.key1.key2
     : (. obj key1 key2)
	 
	 The first argument of /./ can be either a symbol bound to an
     object in scope or an list expression evaluating to an object:
	 
	 : (. (expression-evaluating-to-object) key)
	 : (expression-evaluating-to-object).key
     
     where /obj.key1/ is another object that has the key /key2/. Just
     like the dotted notation in Javascript, this notation only works
     when you know the names of the keys before runtime.  If the name
     of the key is the result of a computation then you can use the
     /get/ function:
     
     : (get obj "key")
     : (get obj 'key)
     : (get obj (expression-evaluating-to-key))
     
     Unlike the /./ special form, /get/ evaluates all of it's
     arguments and is equivalent to the javascript square bracket
     notation.
     
**** Setting
     When the /set/ special form takes an object as it's first a key
     as its second and a value as it's third.  All three arguments are
     evaluated.
     
     : (set obj 'key value)
     : (set obj (expression-evaluatin-to-key) value)
     
*** method notation
    When a property of an object is a function and it is accessed
    using the /./ special form, it is returned with a wrappper
    function that calls the function context of the object.  This
    ensures that /this/ will refer to /obj/ in the context of a the
    call:
    
    : (obj.method args..)
    
    When a function is accessed via /get/, it is returned normally
    without a wrapper.
    
    Additionally functions can be called using /call/ and /apply/
    which specify a context to referred to by /this/:
    
    : (call method context args..)
    : (apply method context arg-list)
	
	Wrapped functions will have their call and apply methods
    overridden to make them work correctly with call and apply.
